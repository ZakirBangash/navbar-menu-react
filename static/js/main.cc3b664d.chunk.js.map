{"version":3,"sources":["components/header/Logo.js","components/header/Nav.js","components/Header.js","components/section/Home.js","components/section/Blog.js","components/section/Contact.js","components/section/About.js","components/section/Login.js","components/Section.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","Component","Nav","state","toggle","menuToggle","setState","this","to","onClick","Header","Home","Blog","Contact","About","Login","Section","path","component","exact","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAYeA,EAVf,uKAEQ,OACI,yBAAKC,UAAU,QACX,2CAJhB,GAA0BC,a,QC4BXC,EA3Bf,4MACIC,MAAQ,CACJC,QAAQ,GAFhB,EAKIC,WAAa,WACT,EAAKC,SAAS,CAACF,QAAS,EAAKD,MAAMC,UAN3C,uDASc,IACCA,EAAUG,KAAKJ,MAAfC,OACP,OACI,oCACI,wBAAIJ,UAAWI,EAAS,SAAW,IAC/B,4BAAI,kBAAC,IAAD,CAAMI,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,qBACJ,wBAAIR,UAAU,QAAQS,QAASF,KAAKF,YAApC,MAEJ,yBAAKL,UAAU,OAAOS,QAASF,KAAKF,YAApC,aArBhB,GAAyBJ,aCaVS,EAXf,uKAEQ,OACI,gCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,WALhB,GAA4BT,aCObU,EAVf,uKAEQ,OACI,6BACI,mDAJhB,GAA0BV,aCUXW,EAVf,uKAEQ,OACI,6BACI,mDAJhB,GAA0BX,aCUXY,EAVf,uKAEQ,OACI,6BACI,sDAJhB,GAA6BZ,aCUda,EAVf,uKAEQ,OACI,6BACI,oDAJhB,GAA2Bb,aCUZc,EAVf,uKAEQ,OACI,6BACI,oDAJhB,GAA2Bd,a,OCoBZe,EAdf,uKAEQ,OACI,iCACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,EAAMQ,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWN,IAC/B,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWH,SARhD,GAA6Bd,aCWdmB,E,uKAXX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANQC,IAAMpB,WCMJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc3b664d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Logo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"logo\">\r\n                <h1>Dev AT</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logo\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport class Nav extends Component {\r\n    state = {\r\n        toggle: false\r\n    }\r\n\r\n    menuToggle = () =>{\r\n        this.setState({toggle: !this.state.toggle})\r\n    }\r\n\r\n    render() {\r\n        const {toggle} = this.state;\r\n        return (\r\n            <>\r\n                <ul className={toggle ? \"toggle\" : \"\"}>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/blog\">Blog</Link></li>\r\n                    <li><Link to=\"/contact\">Contact</Link></li>\r\n                    <li><Link to=\"/about\">About</Link></li>\r\n                    <li><Link to=\"/login\">Login / Register</Link></li>\r\n                    <li className=\"close\" onClick={this.menuToggle}>X</li>\r\n                </ul>\r\n                <div className=\"menu\" onClick={this.menuToggle}>Menu</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react';\r\nimport Logo from './header/Logo';\r\nimport Nav from './header/Nav';\r\n\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Logo />\r\n                <Nav />\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Home Component</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\n\r\nexport class Blog extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Blog Component</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Blog\r\n","import React, { Component } from 'react'\r\n\r\nexport class Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Contact Component</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact\r\n","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>About Component</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\n\r\nexport class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Login Component</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport Home from './section/Home';\r\nimport Blog from './section/Blog';\r\nimport Contact from './section/Contact';\r\nimport About from './section/About';\r\nimport Login from './section/Login';\r\nimport {Route} from 'react-router-dom';\r\n\r\nexport class Section extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n                <Route path=\"/\" component={Home} exact />\r\n                <Route path=\"/blog\" component={Blog} />\r\n                <Route path=\"/contact\" component={Contact} />\r\n                <Route path=\"/about\" component={About} />\r\n                <Route path=\"/login\" component={Login} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Section\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Section from './components/Section';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nclass App extends React.Component{\n  render(){\n    return(\n      <Router>\n        <div>\n          <Header />\n          <Section />\n        </div>\n      </Router>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}